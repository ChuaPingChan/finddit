{"version":3,"sources":["reddit_api.js","index.js"],"names":["search","searchTerm","searchLimit","sortBy","fetch","then","res","json","data","children","map","catch","err","console","log","searchForm","document","getElementById","searchInput","showMessage","message","className","div","createElement","appendChild","createTextNode","searchContainer","insertBefore","setTimeout","querySelector","remove","truncateText","text","limit","shortened","indexOf","substring","addEventListener","e","value","results","output","forEach","post","image","preview","images","source","url","title","selftext","subreddit","score","innerHTML","preventDefault"],"mappings":";AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACXA,OAAQ,SAAUC,EAAYC,EAAaC,GAEhCC,OAAAA,MAAkFH,4EAAAA,OAAAA,EAAmBE,UAAAA,OAAAA,EAAgBD,WAAAA,OAAAA,IACvHG,KAAK,SAAAC,GAAOA,OAAAA,EAAIC,SAChBF,KAAK,SAAAG,GAAQA,OAAAA,EAAKA,KAAKC,SAASC,IAAI,SAAAF,GAAQA,OAAAA,EAAKA,SACjDG,MAAM,SAAAC,GAAOC,OAAAA,QAAQC,IAAIF,OANvB,QAAA,QAAA;;ACsEd,aAtED,IAAA,EAAA,EAAA,QAAA,iBAsEC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GApED,IAAMG,EAAaC,SAASC,eAAe,eACrCC,EAAcF,SAASC,eAAe,gBAkD5C,SAASE,EAAYC,EAASC,GACpBC,IAAAA,EAAMN,SAASO,cAAc,OACnCD,EAAID,UAAqBA,SAAAA,OAAAA,GACzBC,EAAIE,YAAYR,SAASS,eAAeL,IAElCM,IAAAA,EAAkBV,SAASC,eAAe,oBAC1CjB,EAASgB,SAASC,eAAe,UACvCS,EAAgBC,aAAaL,EAAKtB,GAElC4B,WAAW,WAAMZ,OAAAA,SAASa,cAAc,UAAUC,UAAU,KAIhE,SAASC,EAAaC,EAAMC,GAClBC,IAAAA,EAAYF,EAAKG,QAAQ,IAAKF,GAChCC,OAAc,GAAdA,EAAwBF,EACrBA,EAAKI,UAAU,EAAGF,GAhE7BnB,EAAWsB,iBAAiB,SAAU,SAAAC,GAE5BrC,IAAAA,EAAaiB,EAAYqB,MAEzBpC,EAASa,SAASa,cAAc,gCAAgCU,MAEhErC,EAAcc,SAASC,eAAe,SAASsB,MAGlC,KAAftC,GACAkB,EAAY,2BAA4B,gBAG5CD,EAAYqB,MAAQ,GAGbvC,EAAAA,QAAAA,OAAOC,EAAYC,EAAaC,GAClCE,KAAK,SAAAmC,GACEC,IAAAA,EAAS,6BAGbD,EAAQE,QAAQ,SAAAC,GACZF,GAAU,qBAEJG,IAAAA,EAAQD,EAAKE,QAAUF,EAAKE,QAAQC,OAAO,GAAGC,OAAOC,IAAM,KAC7DJ,IACAH,GAAuBG,aAAAA,OAAAA,EAAvB,sCAEJH,GAEiCE,iGAAAA,OAAAA,EAAKM,MACPlB,wDAAAA,OAAAA,EAAaY,EAAKO,SAAU,KACxCP,2CAAAA,OAAAA,EAAKK,IAEiCL,kKAAAA,OAAAA,EAAKQ,UACdR,2EAAAA,OAAAA,EAAKS,MAPrD,yDAUAX,GAAU,WAGdA,GAAU,SACVzB,SAASC,eAAe,WAAWoC,UAAYZ,IAGvDH,EAAEgB","file":"finddit.1395ef79.js","sourceRoot":"..","sourcesContent":["export default {\r\n    search: function (searchTerm, searchLimit, sortBy) {\r\n        // Return a promise\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://www.reddit.com/search.json?q=${searchTerm}&sort=${sortBy}&limit=${searchLimit}`)\r\n            .then(res => res.json())\r\n            .then(data => data.data.children.map(data => data.data))\r\n            .catch(err => console.log(err));\r\n    }\r\n}\r\n","import reddit from './reddit_api';\r\n\r\nconst searchForm = document.getElementById('search-form');\r\nconst searchInput = document.getElementById('search-input');\r\n\r\nsearchForm.addEventListener('submit', e => {\r\n    // Get search term\r\n    const searchTerm = searchInput.value;\r\n    // Get sort\r\n    const sortBy = document.querySelector('input[name=\"sortby\"]:checked').value;\r\n    // Get limit\r\n    const searchLimit = document.getElementById('limit').value;\r\n\r\n    // Check input\r\n    if (searchTerm === '') {\r\n        showMessage('Please add a search term', 'alert-danger');\r\n    }\r\n\r\n    searchInput.value = '';\r\n\r\n    // Search Reddit\r\n    reddit.search(searchTerm, searchLimit, sortBy)\r\n        .then(results => {\r\n            let output = '<div class=\"card-columns\">';\r\n\r\n            // Loop through posts\r\n            results.forEach(post => {\r\n                output += '<div class=\"card\">'\r\n                // Check for image\r\n                const image = post.preview ? post.preview.images[0].source.url : null;\r\n                if (image) {\r\n                    output += `<img src=\"${image}\" class=\"card-img-top\" alt=\"...\">`\r\n                }\r\n                output += `\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">${post.title}</h5>\r\n                        <p class=\"card-text\">${truncateText(post.selftext, 200)}</p>\r\n                        <a href=\"${post.url}\" target=\"_blank\" class=\"btn btn-primary\">Read More</a>\r\n                        <hr>\r\n                        <span class=\"badge badge-secondary\">Subreddit: ${post.subreddit}</span>\r\n                        <span class=\"badge badge-dark\">Score: ${post.score}</span>\r\n                    </div>\r\n                `;\r\n                output += \"</div>\";\r\n            })\r\n\r\n            output += '</div>';\r\n            document.getElementById('results').innerHTML = output;\r\n        });\r\n\r\n    e.preventDefault();\r\n});\r\n\r\nfunction showMessage(message, className) {\r\n    const div = document.createElement('div');\r\n    div.className = `alert ${className}`;\r\n    div.appendChild(document.createTextNode(message));\r\n\r\n    const searchContainer = document.getElementById('search-container');\r\n    const search = document.getElementById('search');\r\n    searchContainer.insertBefore(div, search);\r\n\r\n    setTimeout(() => document.querySelector('.alert').remove(), 3000);\r\n}\r\n\r\n// Some reddit post have long messages, need truncation\r\nfunction truncateText(text, limit) {\r\n    const shortened = text.indexOf(' ', limit);\r\n    if (shortened == -1) return text;\r\n    return text.substring(0, shortened);\r\n}\r\n"]}